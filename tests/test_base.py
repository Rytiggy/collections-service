from api import models
from django.test import Client
from django.contrib.auth import login
from django.test import TestCase, Client
from rest_framework.test import force_authenticate, APIRequestFactory, APIClient
from django.urls import reverse
from .factories import UserFactory, ItemFactory, GroupFactory, CollectionFactory, MeetingFactory


class SimpleTest(TestCase):
    meetings_url = '/collection/1'

    def setUp(self):

        # All users have password "password123" by default
        # Username defaults to first_initial+last_name (i.e. jdoe)
        self.owner = UserFactory(username="owner")
        self.owner.save()

        self.submitter = UserFactory(username="submitter")
        self.submitter.save()

        # all foreign keys must be specified, everything else is auto-generated by default, or can be left blank
        # make a collection with 100 items
        self.collection = CollectionFactory(created_by=self.owner)
        self.collection.save()

        items = ItemFactory.build_batch(100, collection=self.collection, created_by=self.submitter)
        for i in items:
            i.save()

        # make a meeting with 100 items
        self.meeting = MeetingFactory(created_by=self.owner)
        self.meeting.save()

        items = ItemFactory.build_batch(100, collection=self.meeting, created_by=self.submitter)
        for i in items:
            i.save()

        self.factory = APIRequestFactory()
        self.client = APIClient()

    def test_logged_out_users_cannot_post_collection(self):
        self.client.logout()
        response = self.client.post(reverse('collection-list'),
                                {'title': 't', 'description': 'd', 'source': 'mst3k', 'tags': ''})
        self.assertEqual(response.status_code, 401)

    def test_logged_in_users_can_post_collection(self):
        self.client = APIClient()
        self.client.login(username="owner", password="password123")
        response = self.client.post(reverse('collection-list'),
                                {'title': 't', 'description': 'd', 'source': 'mst3k', 'tags': ''})
        self.assertEqual(response.status_code, 201)
